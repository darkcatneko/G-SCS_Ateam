//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Sonaru Developer/Scripts/FakePlayer/FakePlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FakePlayerAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FakePlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FakePlayerAction"",
    ""maps"": [
        {
            ""name"": ""FakePlayer1"",
            ""id"": ""2fb3e0da-80be-4d9d-8291-4cce46db1a3e"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""30408ea3-ddfd-4e0a-801d-d7b2ca1b568c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""e1a1af4e-9ec4-4788-9e5a-328d0489b009"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""d8eef346-2a05-4d3c-ac60-5c07253f1e71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""1f043b71-3b1b-4de2-b814-ec1a3f102508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Check"",
                    ""type"": ""Button"",
                    ""id"": ""6f234557-2150-4f81-a5c4-170788fb4fdb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fa24e0aa-dc2a-4dee-a074-ae9529c5b436"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8a639f2-4da0-4c1b-8d80-37c7f5263190"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf784f83-d8ff-4e17-a470-f5210d941ee4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""899204cb-a2f1-4cbc-9603-384b9e71f923"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40dd28a4-767e-4c56-891d-0c43ac5326ec"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FakePlayer2"",
            ""id"": ""eeb8736e-602e-46f3-8fd8-409a7dd72284"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""bf65a1a2-0b6b-459e-8cb7-55eef3e17bea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""70b32474-fa11-433d-9291-ec44c2a5ec1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""7a6ebc5c-e817-4e64-82ff-22ebb57e4da7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""25a2b34e-1e66-4386-ad40-25de393ff73a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Check"",
                    ""type"": ""Button"",
                    ""id"": ""54cfc904-6b1a-44d2-b90d-81df4a1b92a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f69375db-5e99-461e-b352-390091d7b85f"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3d38052-9167-47d6-b0df-c1dc3038d3fe"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ee1e196-2430-497d-80e3-d4c5f1be9a34"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0eab1f8b-4d3d-440b-b671-fd8a166b7976"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e86fbe2-a310-4678-aa76-e96132c6fb90"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FakePlayer3"",
            ""id"": ""13a33a5b-4f31-40c5-83f7-c46f816a1140"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""72ee5d01-f792-402c-abf3-54bf491eeae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""367dddc2-2d2b-45f7-91cb-1472263b1319"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""26686f91-cdc7-454a-9933-7386c26da094"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""3297cb4c-3ec8-464c-9d9b-3526d1a5d28c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Check"",
                    ""type"": ""Button"",
                    ""id"": ""86d394dd-1c6a-4c77-adfd-0d6827937f55"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""27ebda72-ddb7-4017-8769-74ea5cd55db7"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa712a13-ca47-4dd5-8261-4ecb26e363b6"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93e34346-5254-4523-85fc-a185c2a8dde0"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f0dd0ad-1fd2-4d7a-be46-aa8881ef0584"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""821b90fd-30f5-41a6-aec2-e79946443bbd"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FakePlayer4"",
            ""id"": ""bad1f9f3-49e2-4c27-927b-878661ed63d5"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""33dd3228-4be3-4bcf-bb8f-95c5ff8b655f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""5de52c33-1181-4c87-9ff9-3f588479af62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""45cf8012-ddb6-4983-8631-defe76bb5456"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""5f69c79c-0ddb-4de7-9770-f6a14536f5cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Check"",
                    ""type"": ""Button"",
                    ""id"": ""fff922b8-e5b3-4a10-b945-2b6ab73ab506"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d1c4896-84b2-4fd1-b404-faecf311650e"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86e0aed5-8c91-4617-9d6a-f8960c201fe2"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Check"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56bf9c5c-a787-40fd-b6ab-42ac616861b5"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f43a6387-8001-4af9-a4ef-f77ac80d2cf4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8abacad-d2e1-4a8c-9e42-4aaf9593fd4b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FakePlayer1
        m_FakePlayer1 = asset.FindActionMap("FakePlayer1", throwIfNotFound: true);
        m_FakePlayer1_Up = m_FakePlayer1.FindAction("Up", throwIfNotFound: true);
        m_FakePlayer1_Down = m_FakePlayer1.FindAction("Down", throwIfNotFound: true);
        m_FakePlayer1_Left = m_FakePlayer1.FindAction("Left", throwIfNotFound: true);
        m_FakePlayer1_Right = m_FakePlayer1.FindAction("Right", throwIfNotFound: true);
        m_FakePlayer1_Check = m_FakePlayer1.FindAction("Check", throwIfNotFound: true);
        // FakePlayer2
        m_FakePlayer2 = asset.FindActionMap("FakePlayer2", throwIfNotFound: true);
        m_FakePlayer2_Up = m_FakePlayer2.FindAction("Up", throwIfNotFound: true);
        m_FakePlayer2_Down = m_FakePlayer2.FindAction("Down", throwIfNotFound: true);
        m_FakePlayer2_Left = m_FakePlayer2.FindAction("Left", throwIfNotFound: true);
        m_FakePlayer2_Right = m_FakePlayer2.FindAction("Right", throwIfNotFound: true);
        m_FakePlayer2_Check = m_FakePlayer2.FindAction("Check", throwIfNotFound: true);
        // FakePlayer3
        m_FakePlayer3 = asset.FindActionMap("FakePlayer3", throwIfNotFound: true);
        m_FakePlayer3_Up = m_FakePlayer3.FindAction("Up", throwIfNotFound: true);
        m_FakePlayer3_Down = m_FakePlayer3.FindAction("Down", throwIfNotFound: true);
        m_FakePlayer3_Left = m_FakePlayer3.FindAction("Left", throwIfNotFound: true);
        m_FakePlayer3_Right = m_FakePlayer3.FindAction("Right", throwIfNotFound: true);
        m_FakePlayer3_Check = m_FakePlayer3.FindAction("Check", throwIfNotFound: true);
        // FakePlayer4
        m_FakePlayer4 = asset.FindActionMap("FakePlayer4", throwIfNotFound: true);
        m_FakePlayer4_Up = m_FakePlayer4.FindAction("Up", throwIfNotFound: true);
        m_FakePlayer4_Down = m_FakePlayer4.FindAction("Down", throwIfNotFound: true);
        m_FakePlayer4_Left = m_FakePlayer4.FindAction("Left", throwIfNotFound: true);
        m_FakePlayer4_Right = m_FakePlayer4.FindAction("Right", throwIfNotFound: true);
        m_FakePlayer4_Check = m_FakePlayer4.FindAction("Check", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FakePlayer1
    private readonly InputActionMap m_FakePlayer1;
    private IFakePlayer1Actions m_FakePlayer1ActionsCallbackInterface;
    private readonly InputAction m_FakePlayer1_Up;
    private readonly InputAction m_FakePlayer1_Down;
    private readonly InputAction m_FakePlayer1_Left;
    private readonly InputAction m_FakePlayer1_Right;
    private readonly InputAction m_FakePlayer1_Check;
    public struct FakePlayer1Actions
    {
        private @FakePlayerAction m_Wrapper;
        public FakePlayer1Actions(@FakePlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_FakePlayer1_Up;
        public InputAction @Down => m_Wrapper.m_FakePlayer1_Down;
        public InputAction @Left => m_Wrapper.m_FakePlayer1_Left;
        public InputAction @Right => m_Wrapper.m_FakePlayer1_Right;
        public InputAction @Check => m_Wrapper.m_FakePlayer1_Check;
        public InputActionMap Get() { return m_Wrapper.m_FakePlayer1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FakePlayer1Actions set) { return set.Get(); }
        public void SetCallbacks(IFakePlayer1Actions instance)
        {
            if (m_Wrapper.m_FakePlayer1ActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnRight;
                @Check.started -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnCheck;
                @Check.performed -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnCheck;
                @Check.canceled -= m_Wrapper.m_FakePlayer1ActionsCallbackInterface.OnCheck;
            }
            m_Wrapper.m_FakePlayer1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Check.started += instance.OnCheck;
                @Check.performed += instance.OnCheck;
                @Check.canceled += instance.OnCheck;
            }
        }
    }
    public FakePlayer1Actions @FakePlayer1 => new FakePlayer1Actions(this);

    // FakePlayer2
    private readonly InputActionMap m_FakePlayer2;
    private IFakePlayer2Actions m_FakePlayer2ActionsCallbackInterface;
    private readonly InputAction m_FakePlayer2_Up;
    private readonly InputAction m_FakePlayer2_Down;
    private readonly InputAction m_FakePlayer2_Left;
    private readonly InputAction m_FakePlayer2_Right;
    private readonly InputAction m_FakePlayer2_Check;
    public struct FakePlayer2Actions
    {
        private @FakePlayerAction m_Wrapper;
        public FakePlayer2Actions(@FakePlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_FakePlayer2_Up;
        public InputAction @Down => m_Wrapper.m_FakePlayer2_Down;
        public InputAction @Left => m_Wrapper.m_FakePlayer2_Left;
        public InputAction @Right => m_Wrapper.m_FakePlayer2_Right;
        public InputAction @Check => m_Wrapper.m_FakePlayer2_Check;
        public InputActionMap Get() { return m_Wrapper.m_FakePlayer2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FakePlayer2Actions set) { return set.Get(); }
        public void SetCallbacks(IFakePlayer2Actions instance)
        {
            if (m_Wrapper.m_FakePlayer2ActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnRight;
                @Check.started -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnCheck;
                @Check.performed -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnCheck;
                @Check.canceled -= m_Wrapper.m_FakePlayer2ActionsCallbackInterface.OnCheck;
            }
            m_Wrapper.m_FakePlayer2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Check.started += instance.OnCheck;
                @Check.performed += instance.OnCheck;
                @Check.canceled += instance.OnCheck;
            }
        }
    }
    public FakePlayer2Actions @FakePlayer2 => new FakePlayer2Actions(this);

    // FakePlayer3
    private readonly InputActionMap m_FakePlayer3;
    private IFakePlayer3Actions m_FakePlayer3ActionsCallbackInterface;
    private readonly InputAction m_FakePlayer3_Up;
    private readonly InputAction m_FakePlayer3_Down;
    private readonly InputAction m_FakePlayer3_Left;
    private readonly InputAction m_FakePlayer3_Right;
    private readonly InputAction m_FakePlayer3_Check;
    public struct FakePlayer3Actions
    {
        private @FakePlayerAction m_Wrapper;
        public FakePlayer3Actions(@FakePlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_FakePlayer3_Up;
        public InputAction @Down => m_Wrapper.m_FakePlayer3_Down;
        public InputAction @Left => m_Wrapper.m_FakePlayer3_Left;
        public InputAction @Right => m_Wrapper.m_FakePlayer3_Right;
        public InputAction @Check => m_Wrapper.m_FakePlayer3_Check;
        public InputActionMap Get() { return m_Wrapper.m_FakePlayer3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FakePlayer3Actions set) { return set.Get(); }
        public void SetCallbacks(IFakePlayer3Actions instance)
        {
            if (m_Wrapper.m_FakePlayer3ActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnRight;
                @Check.started -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnCheck;
                @Check.performed -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnCheck;
                @Check.canceled -= m_Wrapper.m_FakePlayer3ActionsCallbackInterface.OnCheck;
            }
            m_Wrapper.m_FakePlayer3ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Check.started += instance.OnCheck;
                @Check.performed += instance.OnCheck;
                @Check.canceled += instance.OnCheck;
            }
        }
    }
    public FakePlayer3Actions @FakePlayer3 => new FakePlayer3Actions(this);

    // FakePlayer4
    private readonly InputActionMap m_FakePlayer4;
    private IFakePlayer4Actions m_FakePlayer4ActionsCallbackInterface;
    private readonly InputAction m_FakePlayer4_Up;
    private readonly InputAction m_FakePlayer4_Down;
    private readonly InputAction m_FakePlayer4_Left;
    private readonly InputAction m_FakePlayer4_Right;
    private readonly InputAction m_FakePlayer4_Check;
    public struct FakePlayer4Actions
    {
        private @FakePlayerAction m_Wrapper;
        public FakePlayer4Actions(@FakePlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_FakePlayer4_Up;
        public InputAction @Down => m_Wrapper.m_FakePlayer4_Down;
        public InputAction @Left => m_Wrapper.m_FakePlayer4_Left;
        public InputAction @Right => m_Wrapper.m_FakePlayer4_Right;
        public InputAction @Check => m_Wrapper.m_FakePlayer4_Check;
        public InputActionMap Get() { return m_Wrapper.m_FakePlayer4; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FakePlayer4Actions set) { return set.Get(); }
        public void SetCallbacks(IFakePlayer4Actions instance)
        {
            if (m_Wrapper.m_FakePlayer4ActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnRight;
                @Check.started -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnCheck;
                @Check.performed -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnCheck;
                @Check.canceled -= m_Wrapper.m_FakePlayer4ActionsCallbackInterface.OnCheck;
            }
            m_Wrapper.m_FakePlayer4ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Check.started += instance.OnCheck;
                @Check.performed += instance.OnCheck;
                @Check.canceled += instance.OnCheck;
            }
        }
    }
    public FakePlayer4Actions @FakePlayer4 => new FakePlayer4Actions(this);
    public interface IFakePlayer1Actions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
    }
    public interface IFakePlayer2Actions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
    }
    public interface IFakePlayer3Actions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
    }
    public interface IFakePlayer4Actions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCheck(InputAction.CallbackContext context);
    }
}
